Theory covered three strategies of dealing with deadlocks: recovery, prevention and avoidance.

- In recovery,
    The operating system allows the impasse to occur before attempting to resolve it. To accomplish this, 
    it can attempt to starve the process causing the deadlock of a preemptive resource. It can also use 
    rollback, thus checkpoints should be made while the program is running in order to return to them. 
    Finally, it can just kill the process that is creating the deadlock. This is the most primitive method 
    and should be avoided whenever possible.

- In prevention,
    The approach is to make sure that at least one of the four conditions (Mutual Exclusion, Hold and Wait, 
    No Preemption, and Circular Wait) will never be met in an effort to avoid deadlocks. Each condition has 
    a unique method of prevention, some of which are simpler than others. They all set a maximum number of 
    resources that a process is permitted to use.

- In avoidance,
    It is the best because it prevents a stalemate and doesn't squander resources in a way that prevention 
    does. It only works if certain information is provided ahead of time, such as determining whether or 
    not providing a specific resource is safe. A smart scheduling algorithm is necessary for this.